[["index.html", "Notas Curso Básico R Capítulo 1 Introducción", " Notas Curso Básico R Tobías Chavarría Actualizado el 23 Feb, 2021 Capítulo 1 Introducción Este documento contiene las bases del lenguaje de programación R para poder empezar a realizar análisis de datos, se va a iniciar con la instalación y las configuraciones básicas, y luego avanzaremos a los principios básicos del lenguaje y las herramientas necesarias que nos permitan realizar un análisis exploratorio de un conjunto de datos, construir funciones básicas y realizar visualizaciones. "],["primeros-pasos-con-r-y-rstudio.html", "Capítulo 2 Primeros pasos con R y RStudio 2.1 Instalación 2.2 Entorno de trabajo de RStudio. 2.3 Paquetes 2.4 Scripts 2.5 Shortcuts", " Capítulo 2 Primeros pasos con R y RStudio R es un entorno y lenguaje de programación con un enfoque al análisis estadístico RStudio es un IDE por sus siglas en ingles Integrated Development Environment o Entorno De Desarrollo Integrado que facilita la interacción con el lenguaje de programación R y los procesos de carga de datos, instalación y administración de paquetes, exportación de gráficos y administración de archivos, entre otros. El objetivo de este capítulo es conocer el entorno de trabajo que proporciona R y RStudio, además de aprender a instalar y cargar los paquetes que se necesiten para realizar análisis de datos. 2.1 Instalación 2.1.1 R Para instalar R en Windows, la forma más simple es descargar la versión más reciente de R base desde el siguiente enlace de CRAN: https://cran.r-project.org/bin/windows/base/ El archivo que necesitamos tiene la extensión .exe (por ejemplo 4.0.2-win.exe). Una vez descargado, lo ejecutamos como cualquier instalable. Después de la instalación, estamos listos para usar R. 2.1.2 RStudio Para instalar RStudio, es necesario descargar y ejecutar alguno de los instaladores disponibles en su sitio oficial. Están disponibles versiones para Windows, OSX y Linux. https://www.rstudio.com/products/rstudio/download/ Si ya hemos instalado R en nuestro equipo, RStudio lo detectará automáticamente y podremos utilizarlo desde este entorno. Si no instalamos RStudio antes que R, no hay problema, cada vez que iniciamos este programa, verificará la instalación de R. 2.2 Entorno de trabajo de RStudio. En general se trabaja con la interfaz de RStudio antes que con la de R porque la primera es mucho “más amigable.” Al abrir RStudio veremos algo como esto: Una vez estamos en RStudio, podemos escribir y ejecutar las órdenes de varias formas: Directamente en la consola A través de un script (.R) Con ficheros Rmarkdown (.Rmd) 2.2.1 Consola de R La consola de RStudio nos permite interactuar con los comandos de R, es decir, ingresamos una instrucción en la consola y esta retornará el resultado de la ejecución de ese comando, aunque esta es una herramienta muy útil no es la mejor opción cuando nuestro código gana complejidad. En la consola escribimos expresiones, el símbolo “&lt;-” es el operador de asignación, aunque también se puede utilizar el símbolo “=.” Asignación de valores. x &lt;- 1 # Asignamos el valor 1 a la variable x texto &lt;- &quot;Bienvenidos&quot; # Asignamos el valor &quot;Bienvenidos&quot; a la variable texto En R el símbolo “#” indica que es un comentario, cualquier cosa que esté a su derecha (incluido el “#”) será ignorado a la hora de ejecutar el código. Este es el único símbolo para hacer comentarios en R y además cabe mencionar que R no soporta comentarios en bloques o multilíneas. Evaluación. Cuando escribimos una expresión en la consola, podemos imprimir su valor sin una orden explícita. x &lt;- 13 # No imprime nada, solo asigna el valor x # Se imprime el valor ## [1] 13 print(x) # Orden explicita ## [1] 13 2.2.2 Ayuda en R Al comenzar a trabajar con R necesitaremos información sobre cada instrucción, función y paquete. Toda la documentación se encuentra integrada en RStudio, para accesar a esta información podemos usar la función help() o el signo de interrogación ?, de la siguiente manera help(&quot;funcion&quot;) ?funcion ??nombre_paquete Al ejecutar estas instrucciones la información aparece en la pestaña de help. help(&quot;read.table&quot;) ?read.table 2.2.3 Nombres en R Al igual que la documentación de nuestro código, es importante el nombre que le demos a nuestros objetos (variables, funciones). En R los nombres de los objetos deben comenzar con una letra y solo pueden contener letras, números y los signos : \"\" , “.” Es bueno que los nombres sean descriptivos, es necesario adoptar una convención, la más común es la del guión bajo (snake_case) en la que los nombres se escriben en minúscula y separados por . yo_uso_guion_bajo ## snake_case OtraGenteUsaMayusculas algunas.personas.usan.puntos ## Esto es peculiar de R, ya que en otros lenguajes el punto no se acepta en los nombres ## ya que tiene otras funciones Y_algunasPocas.Personas_RENIEGANdelasconvenciones Generalmente las variables son sustantivos y el nombre de las funciones verbos, se debe procurar que los nombres sean concisos y con significado. ## Correcto dia_uno &lt;- 10 ## Incorrecto primer_dia_del_mes &lt;- 10 También se debe evitar utilizar nombres de funciones o variables comunes, esto causa confusión al leer el código. ## Incorrecto T &lt;- FALSE c &lt;- 10 mean &lt;- function(x) { sum(x) } Existen muchas otras buenas prácticas a la hora de escribir código en R, el siguiente link contiene una guía del estilo tidyverse. https://style.tidyverse.org/index.html 2.2.4 Scripts de R Trabajar en la consola es muy limitado ya que las instrucciones se tienen que escribir una por una. Lo habitual es trabajar con scripts o ficheros de instrucciones. Estos ficheros tienen extensión .R. Se puede crear una script con cualquier editor de texto, pero nosotros lo haremos desde RStudio. Para hacer esto, seleccionamos la siguiente ruta de menús: File &gt; New File &gt; R script 2.2.5 Entorno El panel de entorno esta compuesto de dos pestañas: Environment y History. En el entorno se irán registrando los objetos que vayamos creando en la sesión de trabajo: datos, variables, funciones. También tenemos la opción de cargar y guardar una sesión de trabajo, importar datos y limpiar los objetos de la sesión. Estas opciones están accesibles a través de las de opciones de la pestaña. 2.2.6 Directorio de trabajo El directorio o carpeta de trabajo es el lugar en la computadora en el que se encuentran los archivos con los que se van a trabajar en R. Este es el lugar donde R buscara archivos para importarlos y al que serán exportados, a menos que indiquemos otra cosa. Para encontrar cuál es el directorio de trabajo actual se utiliza la función getwd(). getwd() ## [1] &quot;/Users/tchavarria/Documents/GitHub/programacion-r-basico&quot; Se mostrará en la consola la ruta del directorio que está usando R. Se puede cambiar el directorio de trabajo usando la función setwd(), dando como argumento la ruta del directorio que se desea utilizar. setwd(&quot;otra_ruta&quot;) 2.3 Paquetes Cada paquete es una colección de funciones diseñadas para atender una tarea específica. Por ejemplo, hay paquetes para trabajo visualización, conexiones a bases de datos, minería de datos, interacción con servicios de internet, entre otros. Estos paquetes se encuentran alojados en CRAN, así que pasan por un control riguroso antes de estar disponibles para su uso generalizado. Se pueden instalar paquetes usando la función install.packages(), dando como argumento el nombre del paquete que deseamos instalar, entre comillas. Por ejemplo, para instalar el paquete dplyr, ejecutamos lo siguiente. install.packages(&quot;dplyr&quot;) ## En general se escribe install.packages(&quot;nombre_paquete&quot;) Después de ejecutar esa instrucción, aparecerán algunos mensajes en la consola mostrando el avance de la instalación Una vez concluida la instalación de un paquete, para poder utilizar sus funciones debemos ejecutar la función library() con el nombre del paquete que se quiere utilizar. library(dplyr) ## En general se escribe library(&quot;nombre_paquete&quot;) 2.4 Scripts Los scripts son documentos de texto con la extensión de archivo .R, por ejemplo mi_script.R. Estos archivos son iguales a cualquier documentos de texto, pero R los puede leer y ejecutar el código que contienen. Aunque R permite el uso interactivo, es recomendable guardar el código en un archivo .R, de esta manera se puede utilizar después y compartirlo con otras personas. En general, en proyectos complejos, es posible que sean necesarios múltiples scripts para distintos fines. Se pueden abrir y ejecutar scripts en R usando la función source(), esta recibe como argumento la ruta del archivo .R en nuestra computadora, entre comillas. Por ejemplo. source(&quot;C:/Proyecto/limpiezaDatos.R&quot;) Cuando usamos RStudio y abrimos un script con extensión .R, este programa abre un panel en el que se puede ver su contenido. De este modo se puede ejecutar todo el código que contiene o sólo partes de él. 2.5 Shortcuts Borrar toda la consola: CTRL + L. Ejecutar una línea o lo que se seleccione: CTRL+R "],["objetos-en-r-.html", "Capítulo 3 Objetos en R.", " Capítulo 3 Objetos en R. En R tenemos 5 clases de objeto básicos o atómicos: character numeric integer complex logical (TRUE/FALSE) tipo.bien &lt;- &quot;Vivienda&quot; ## character saldo &lt;- 130500.34 ## numeric meses &lt;- 13 ## numeric dias.mora &lt;- 10L ## integer complejo &lt;- 1 + 3i ## complex cobro.judicial &lt;- TRUE ## logical Números. En R los número en general se tratan como objetos numeric (i.e números reales de doble precisión.) Existe el valor Inf que representa infinito y se asocia a operaciones como : 1/0. 1 / 0 ## [1] Inf -1 / 0 ## [1] -Inf 100 / Inf ## [1] 0 El valor NaN significa not a number, este se asocia generalmente a datos ausentes pero también a una operación del tipo 0/0 que no está definida. Atributos Los objetos en R pueden tener los siguientes atributos names, dimnames (matrices, data frames) dimension (matrices, data frames) class length más adelante veremos que con detalle el uso de estos. "],["operadores.html", "Capítulo 4 Operadores", " Capítulo 4 Operadores Operadores aritméticos En R tenemos los siguientes operadores aritméticos: Operador Operación Ejemplo Resultado + Suma 3+1 4 - Resta 4-6 -2 * Multiplicación 4*6 24 / División 14/5 2.8 ^ Potencia 2^3 8 %% División entera 5%%2 1 Operadores relacionales Los operadores relacionales son usados para hacer comparaciones y siempre devuelven como resultado TRUE o FALSE (verdadero o falso, respectivamente). Operador Operación Ejemplo Resultado &lt; Menor estricto 10 &lt; 3 FALSE &lt;= Menor o igual 10 &lt;= 3 FALSE &gt; Mayor estricto 10 &gt; 3 TRUE &gt;= Mayor o igual 10 &gt;= 3 TRUE == Igual 10 == 3 FALSE != Distinto 10 != 3 TRUE Operadores lógicos Los operadores lógicos son usados para operaciones de álgebra Booleana, es decir, para describir relaciones lógicas, expresadas como verdadero (TRUE) o falso (FALSO). Operador Operación | or &amp; and (conjunción) ! negación Los operadores | y &amp; siguen estas reglas: | devuelve TRUE si alguno de los datos es TRUE &amp; solo devuelve TRUE si ambos datos es TRUE | solo devuelve FALSE si ambos datos son FALSE &amp; devuelve FALSE si alguno de los datos es FALSE edad &lt;- 16 notas &lt;- 83 beca1 &lt;- (edad &gt; 18 &amp; notas &gt; 80) beca1 ## [1] FALSE beca2 &lt;- (edad &gt; 18 | notas &gt; 80) beca2 ## [1] TRUE "],["estructuras-de-datos-.html", "Capítulo 5 Estructuras de datos. 5.1 Vectores 5.2 Matrices 5.3 Data Frames 5.4 Listas 5.5 Factores 5.6 Valores ausentes", " Capítulo 5 Estructuras de datos. Las estructuras de datos básicas de R se pueden agrupar por su dimensionalidad y según si son homogéneas (todos los elementos son del mismo tipo) o heterogéneas (hay elementos de distintos tipos). En el siguiente cuadro se resumen estas: Dimensión Homogéneas Heterogéneas 1d Vector Lista 2d Matriz Data Frame 5.1 Vectores Los vectores en R son fundamentales ya que, es una de las estructuras de datos más utilizada, la propiedad más importante de los vectores, es que solo pueden contener objetos de la misma clase. Vectores vacíos pueden crearse con la función vector(), por ejemplo: vector(&quot;numeric&quot;, length = 10) ## Tiene los parámetros clase y longitud. ## [1] 0 0 0 0 0 0 0 0 0 0 vector(&quot;character&quot;, 3) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; Sin embargo, la forma más común para crear vectores es utilizando la función c() que hace referencia a la palabra concatenar. vector.numerico &lt;- c(1, 2, 3.5) ## numeric vector.logical &lt;- c(TRUE, FALSE, T, T, F) ## logical vector.char &lt;- c(&quot;Azul&quot;, &quot;Blanco&quot;, &quot;Verde&quot;) ## character vector.entero &lt;- 1:13 ## integer vector.numerico ## [1] 1.0 2.0 3.5 vector.logical ## [1] TRUE FALSE TRUE TRUE FALSE vector.char ## [1] &quot;Azul&quot; &quot;Blanco&quot; &quot;Verde&quot; vector.entero ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 5.1.1 Coerción Como dijimos anteriormente los vectores solo contienen una misma clase de datos, sin embargo, cuando mezclamos diferentes clases ocurre automáticamente un proceso que se llama coerción, esto básicamente transforma todos los elementos del vector a una misma clase. vector.prueba1 &lt;- c(1.3, &quot;Diego&quot;) # character vector.prueba1 ## [1] &quot;1.3&quot; &quot;Diego&quot; vector.prueba2 &lt;- c(TRUE, 13, FALSE) # numeric #TRUE =1 , # FALSE =0 vector.prueba2 ## [1] 1 13 0 Una función muy útil es length ya que nos devuelve el tamaño de nuestro vector. length(vector.prueba2) ## [1] 3 Reglas de coerción: Valores lógicos se convierten en numéricos: TRUE = 1, FALSE=0. El orden de coerción es el siguiente: logical -&gt; integer -&gt; numeric -&gt; character Es decir todos los elementos del vector se van a transformar a la clase correspondiente siguiendo el orden anterior. vector.prueba3 &lt;- c(12, TRUE, &quot;Azul&quot;) vector.prueba3 ## [1] &quot;12&quot; &quot;TRUE&quot; &quot;Azul&quot; Esto es lo que hace R de forma automática, sin embargo, podemos realizar la coerción de forma explícita utilizando la función as.* # Vector numerico 0,1,2,3,4,5. x &lt;- 0:5 # Se transforma a clase logical as.logical(x) # 0 es FALSE, y cualquier otro número es TRUE. ## [1] FALSE TRUE TRUE TRUE TRUE TRUE # Se transforma a clase character as.character(x) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; x &lt;- as.character(x) x ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; Al hacer la coerción de forma explícita es común obtener el siguiente warning: “Nas introduced by coercion” Esto significa que dentro del vector hay valores que no tiene sentido convertirlos a la clase que queremos, por ejemplo, convertir y &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) as.numeric(y) ## [1] NA NA NA Tal vez en el ejemplo anterior no tiene mucho sentido, sin embargo puede pasar que haya una variable que debería contener solo números, pero aparece una letra por error. y &lt;- c(1:3, &quot;A&quot;, 5:7) y ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;A&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; as.numeric(y) ## [1] 1 2 3 NA 5 6 7 5.2 Matrices Las matrices son vectores pero con el atributo de dimensión. Este atributo es un vector de longitud 2 que contiene el número de filas y el número de columnas (nrow,ncol). En R la función para crear matrices es matrix recibe cuatro parámetros (dos son opcionales) data : vector con los valores que contendrá la matriz. nrow : cantidad de filas de la matriz. ncol : cantidad de columnas de la matriz. byrow : si su valor es TRUE la lectura de los datos se realiza por filas sino se realiza por columnas. matriz1 &lt;- matrix(nrow = 2, ncol = 3) # No le doy los valores entonces coloca NA en todas las entradas. matriz1 ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA Las matrices se construyen por defecto por columnas, empezando por el valor de la entrada \\((1,1)\\). matriz1 &lt;- matrix(1:9, nrow = 3, ncol = 3) matriz1 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 Esta función nos devuelve la cantidad de filas y columnas de nuestra matriz. dimensiones &lt;- dim(matriz1) dimensiones ## [1] 3 3 Es muy común utilizar solo uno de estos valores, estos se pueden obtener mediante la siguiente instrucción. filas &lt;- dimensiones[1] columnas &lt;- dimensiones[2] filas ## [1] 3 columnas ## [1] 3 Sin embargo se puede cambiar a que se construyan por filas asignando el parámetro byrow en TRUE. matriz2 &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = T) matriz2 ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 Un par de funciones útiles a la hora de crear matrices o conjuntos de datos son rbind y cbind que permiten concatenar objetos en forma de filas y columnas respectivamente. x &lt;- 1:5 y &lt;- 11:15 rbind(x, y) ## [,1] [,2] [,3] [,4] [,5] ## x 1 2 3 4 5 ## y 11 12 13 14 15 cbind(x, y) ## x y ## [1,] 1 11 ## [2,] 2 12 ## [3,] 3 13 ## [4,] 4 14 ## [5,] 5 15 5.3 Data Frames Los data frames constituyen la manera más eficiente mediante la cual R puede analizar un conjunto de datos estadísticos. Habitualmente se configuran de tal manera que cada fila se refiere a un individuo o unidad estadística, mientras que cada columna hace referencia a una variable estadística, esa configuración hace que visualmente un data frame parezca una matriz. Sin embargo, como objetos de R, son cosas distintas. Los data frames tienen los atributos row.names y col.names. Usualmente se crean leyendo datos con las funciones read.table() y read.csv(), pero también podemos utilizar la función data.frame(). Se pueden convertir a matrices utilizando la función data.matrix() o as.matrix(). # Creamos las variables de nuestro data frame. emisor &lt;- c(&quot;BL&quot;, &quot;BARCL&quot;, &quot;CSGF&quot;, &quot;CVS&quot;, &quot;DBK&quot;, &quot;G&quot;, &quot;NOMUR&quot;, &quot;USTES&quot;, &quot;BNSFI&quot;) monto.facial &lt;- c(5000000, 2500000, 10000000, 40000000, 5000000, 40000000, 10000000, 5600000, 50000000) categoria &lt;- c(&quot;COSTO AMORTIZADO&quot;, &quot;COSTO AMORTIZADO&quot;, &quot;COSTO AMORTIZADO&quot;, &quot;VR CON CAMBIO EN ORI&quot;, &quot;COSTO AMORTIZADO&quot;, &quot;VR CON CAMBIO EN P/G&quot;, &quot;COSTO AMORTIZADO&quot;, &quot;COSTO AMORTIZADO&quot;, &quot;COSTO AMORTIZADO&quot;) calificacion.SP &lt;- c(&quot;BBB+&quot;, &quot;AA+&quot;, &quot;B+&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B&quot;, &quot;A+&quot;, &quot;BB-&quot;, &quot;BB&quot;) isin &lt;- c(&quot;US06738EAL92&quot;, &quot;US225433AH43&quot;, &quot;US126650CK42&quot;, &quot;XS2127535131&quot;, &quot;CRG0000B82H3&quot;, &quot;US404280BJ78&quot;, &quot;0NRBNCR00465&quot;, &quot;US9127962Z13&quot;, &quot;US9128283G32&quot;) # Creamos el data frame. portafolio &lt;- data.frame(ISIN = isin, Emisor = emisor, Monto.Facial = monto.facial, Categoria_NIIF = categoria, Calificacion = calificacion.SP) portafolio ## ISIN Emisor Monto.Facial Categoria_NIIF Calificacion ## 1 US06738EAL92 BL 5.0e+06 COSTO AMORTIZADO BBB+ ## 2 US225433AH43 BARCL 2.5e+06 COSTO AMORTIZADO AA+ ## 3 US126650CK42 CSGF 1.0e+07 COSTO AMORTIZADO B+ ## 4 XS2127535131 CVS 4.0e+07 VR CON CAMBIO EN ORI B+ ## 5 CRG0000B82H3 DBK 5.0e+06 COSTO AMORTIZADO B ## 6 US404280BJ78 G 4.0e+07 VR CON CAMBIO EN P/G B ## 7 0NRBNCR00465 NOMUR 1.0e+07 COSTO AMORTIZADO A+ ## 8 US9127962Z13 USTES 5.6e+06 COSTO AMORTIZADO BB- ## 9 US9128283G32 BNSFI 5.0e+07 COSTO AMORTIZADO BB dim(portafolio) ## [1] 9 5 5.4 Listas Con los data frames vimos que se pueden guardar diferentes tipos de datos en columnas. Ahora queremos ir un poco más allá y guardar diferentes objetos en una misma estructura de datos. Las listas permiten agrupar o contener cosas como dataframes, matrices y vectores en una misma variable. Para crear una lista podemos utilizar la función list(), por ejemplo lista1 &lt;- list(1, &quot;A&quot;, TRUE) # integer, character, logical lista1 ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;A&quot; ## ## [[3]] ## [1] TRUE mi_vector &lt;- 1:10 mi_matriz &lt;- matrix(1:4, nrow = 2) mi_dataframe &lt;- data.frame(&quot;numeros&quot; = 1:3, &quot;letras&quot; = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) mi_lista &lt;- list(&quot;un_vector&quot; = mi_vector, &quot;una_matriz&quot; = mi_matriz, &quot;un_df&quot; = mi_dataframe) mi_lista ## $un_vector ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $una_matriz ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## $un_df ## numeros letras ## 1 1 a ## 2 2 b ## 3 3 c Cuando creamos listas lo más común es nombrar cada una de las entradas para luego poder extraer esos datos con el signo “$.” lista_clientes &lt;- list(saldo = runif(3, min = 1000, max = 2000), nombres = c(&quot;Juan&quot;, &quot;Luis&quot;, &quot;Carlos&quot;), tarjeta.credito = c(T, T, F)) lista_clientes ## $saldo ## [1] 1926.034 1412.815 1409.480 ## ## $nombres ## [1] &quot;Juan&quot; &quot;Luis&quot; &quot;Carlos&quot; ## ## $tarjeta.credito ## [1] TRUE TRUE FALSE # runif(cantidad, min, max) genera números aleatorios. lista_clientes$saldo ## [1] 1926.034 1412.815 1409.480 Otro ejemplo: datos.lucas &lt;- list(Nombre = &quot;Lucas&quot;, Edad = 33, Tarjeta.Credito = FALSE) datos.lucas ## $Nombre ## [1] &quot;Lucas&quot; ## ## $Edad ## [1] 33 ## ## $Tarjeta.Credito ## [1] FALSE Una ventaja del objeto lista es que podemos accesar a cada uno de sus argumentos mediante el símbolo “$,” por ejemplo si quisieramos ver su Edad y luego si posee tarjeta de crédito o no, podemos escribir datos.lucas$Edad ## [1] 33 datos.lucas$Tarjeta.Credito ## [1] FALSE 5.5 Factores Esta clase de datos se utiliza para representar datos categóricos. Estos pueden ser ordenados y sin orden. Podemos pensar en los factores como un vector de enteros, donde cada número representa una categoría. Los factores tienen un tratamiento especial en las funciones de modelación como lm() y glm(). (Regresiones lineales) Es mejor utilizar factores que utilizar enteros, por ejemplo tener la variable Estado civil, con los valores “Casado,” “Soltero” es mejor que utilizar los valores 1 y 2. La función para crear variables categóricas es factor() estado.deuda &lt;- factor(c(&quot;NORMAL&quot;, &quot;NORMAL&quot;, &quot;VENCIDA&quot;, &quot;COBRO JUDICIAL&quot;, &quot;VENCIDA&quot;)) estado.deuda ## [1] NORMAL NORMAL VENCIDA COBRO JUDICIAL VENCIDA ## Levels: COBRO JUDICIAL NORMAL VENCIDA Como podemos ver, al imprimir nuestra variable categórica tenemos tres niveles : COBRO JUDICIAL NORMAL VENCIDA. Estos representan las categorías en nuestra variable. R automáticamente hace está asignación por orden alfabético, si queremos definir nosotros el orden, podemos hacerlo utilizando el parámetro levels. estado.deuda &lt;- factor(c(&quot;NORMAL&quot;, &quot;NORMAL&quot;, &quot;VENCIDA&quot;, &quot;COBRO JUDICIAL&quot;, &quot;VENCIDA&quot;), levels = c(&quot;NORMAL&quot;, &quot;VENCIDA&quot;, &quot;COBRO JUDICIAL&quot;)) estado.deuda ## [1] NORMAL NORMAL VENCIDA COBRO JUDICIAL VENCIDA ## Levels: NORMAL VENCIDA COBRO JUDICIAL Una forma de saber cuantos individuos hay en cada categoría es mediante la función table(). table(estado.deuda) ## estado.deuda ## NORMAL VENCIDA COBRO JUDICIAL ## 2 2 1 5.6 Valores ausentes Los valores ausentes se denotan por NA (not avaiable) o NaN(not a number), las siguientes funciones se utilizan para verificar y encontrar valores ausentes. is.na(): Se utiliza para verificar y encontrar los valores NA en un objeto. is.nan(): Se utiliza para verificar y encontrar los valores NaN en un objeto. Un valor NaN es un NA pero la otra dirección no es cierta. ## Creamos un vector que contenga un NA x &lt;- c(1, 3, NA, 10, 3) ## Retorna un vector de la misma longitud de x, con TRUE donde hay un NA y FALSE donde no. is.na(x) ## [1] FALSE FALSE TRUE FALSE FALSE ## Creamos un vector que contenga un NA y NaN. x &lt;- c(1, 3, NA, 10, 3, NaN) ## Retorna un vector de la misma longitud de x, con TRUE donde hay un NA y FALSE donde no. is.na(x) ## [1] FALSE FALSE TRUE FALSE FALSE TRUE ## Retorna un vector de la misma longitud de x, con TRUE donde hay un NA y FALSE donde no. is.nan(x) ## [1] FALSE FALSE FALSE FALSE FALSE TRUE con el ejemplo anterior se puede verificar el punto 3.. "],["subsetting.html", "Capítulo 6 Subsetting 6.1 Subsetting vectores 6.2 Subsetting matrices 6.3 Subsetting data frames 6.4 Subsetting listas", " Capítulo 6 Subsetting Vamos a ver como podemos obtener subconjuntos de nuestros datos, existen tres tipos de operaciones para extraer subconjuntos de datos en R: \\([ ]\\): Siempre retorna un objeto de la misma clase que el original. \\([[ ]]\\): Se utiliza para extraer elementos de una lista o un data frame, mediante índices lógicos o numéricos. No necesariamente retorna una lista o data frame. $: Se utiliza para extraer elementos de una lista por su nombre. 6.1 Subsetting vectores Índices numéricos: x &lt;- c(&quot;A&quot;, &quot;BB+&quot;, &quot;CCC&quot;, &quot;AA+&quot;, &quot;B&quot;, &quot;B+&quot;) x[1] ## [1] &quot;A&quot; x[3] ## [1] &quot;CCC&quot; x[1:3] ## [1] &quot;A&quot; &quot;BB+&quot; &quot;CCC&quot; Algo peculiar y útil en R es que podemos obtener elementos, seleccionando los que no queremos x[-1] ## Todos excepto el primer elemento ## [1] &quot;BB+&quot; &quot;CCC&quot; &quot;AA+&quot; &quot;B&quot; &quot;B+&quot; x[-c(1, 3, 5)] ## Todos excepto los elementos e la posición 1,3,5. ## [1] &quot;BB+&quot; &quot;AA+&quot; &quot;B+&quot; Índices lógicos. # Vector de enteros del 1 al 10. y &lt;- sample(30, 10) # sample(x,n) retorna n números aleatorios sin repeticiones menores o iguales a x. y ## [1] 2 17 13 10 25 8 6 29 23 19 # Retorna un vector con los valores mayores que 4. y[y &gt; 10] ## [1] 17 13 25 29 23 19 Esto también es válido pero es más lardo de escribir. # Guardamos un índice lógico que nos devuelve TRUE en las posiciones de y que hay elementos mayores a 4. index &lt;- y &gt; 20 index ## [1] FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE TRUE FALSE # Extraemos los elementos utilizando el índice lógico. y[index] ## [1] 25 29 23 6.2 Subsetting matrices Podemos obtener los elementos de una matriz utilizando los índices usuales, es decir, para obtener de la matriz \\(M\\) el elemento que está en la fila \\(i\\) y en la columna \\(j\\), escribimos \\[ M[i,j] \\] Si queremos obtener la fila \\(i\\) o la columna \\(j\\) escribimos \\[ M[i,] \\qquad; \\qquad M[,j] \\] respectivamente. M &lt;- matrix(1:9, 3, 3) M ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## Obtenemos el elemento que está en la fila 1 y la columna 3. M[1, 3] ## [1] 7 ## Obtenemos la fila 1 M[1, ] ## [1] 1 4 7 ## Obtenemos la columna 2 M[, 2] ## [1] 4 5 6 ## La matriz menos la fila 1 M[-1, ] ## [,1] [,2] [,3] ## [1,] 2 5 8 ## [2,] 3 6 9 # Con drop igual FALSE obtenemos un objeto de tipo matrix. M[3, , drop = F] ## [,1] [,2] [,3] ## [1,] 3 6 9 6.3 Subsetting data frames Para extraer “trozos” de un data frame por filas y columnas (funciona exactamente igual que en matrices) donde \\(n\\) y \\(m\\) pueden definirse como: intervalos condiciones números naturales no poner nada mtcars[1, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 mtcars[1:3, 1:4] ## mpg cyl disp hp ## Mazda RX4 21.0 6 160 110 ## Mazda RX4 Wag 21.0 6 160 110 ## Datsun 710 22.8 4 108 93 Para extraer a solo una variable (columna) del data frame podemos utilizar el simbolo de dólar “$.” mtcars$hp ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 Para hacer filtros podemos combinar los dos métodos anteriores: mtcars[mtcars$hp &gt; 100, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 6.4 Subsetting listas Para acceder a elementos de las listas podemos usar $ o doble corchete [[ ]], ambos realizan la misma operación in embargo una usa índice y el otro el nombre del elemento. datos.cliente &lt;- list(Nombre = c(&quot;Lucas&quot;, &quot;Luis&quot;, &quot;Diego&quot;), Edad = c(33, 50, 20), Tarjeta.Credito = c(T, F, T)) datos.cliente ## $Nombre ## [1] &quot;Lucas&quot; &quot;Luis&quot; &quot;Diego&quot; ## ## $Edad ## [1] 33 50 20 ## ## $Tarjeta.Credito ## [1] TRUE FALSE TRUE datos.cliente$Nombre ## [1] &quot;Lucas&quot; &quot;Luis&quot; &quot;Diego&quot; datos.cliente$Edad ## [1] 33 50 20 datos.cliente$Tarjeta.Credito ## [1] TRUE FALSE TRUE datos.cliente[[1]] ## [1] &quot;Lucas&quot; &quot;Luis&quot; &quot;Diego&quot; datos.cliente[[2]] ## [1] 33 50 20 Si queremos el valor i del elemento j escribimos \\[lista[[j]][i]\\] datos.cliente[[3]][1] ## Valor 1 del elemento 3. ## [1] TRUE "],["operaciones-vectorizadas-.html", "Capítulo 7 Operaciones vectorizadas.", " Capítulo 7 Operaciones vectorizadas. La idea de las operaciones vectorizadas es que los cálculos se pueden hacer en paralelo. Muchas de las operaciones en R son vectorizadas, esto hace que el código sea mucho más eficiente, fácil de escribir y leer. Suma de dos vectores x &lt;- 1:4 y &lt;- 6:9 x ## [1] 1 2 3 4 y ## [1] 6 7 8 9 En otros lenguajes z &lt;- vector(&quot;numeric&quot;, length = length(x)) for (i in 1:length(x)) { z[i] &lt;- x[i] + y[i] } z ## [1] 7 9 11 13 En R x + y ## [1] 7 9 11 13 Otras operaciones x &gt; 2 ## [1] FALSE FALSE TRUE TRUE y == 8 ## [1] FALSE FALSE TRUE FALSE x * y ## [1] 6 14 24 36 x / y ## [1] 0.1666667 0.2857143 0.3750000 0.4444444 Similar para matrices x &lt;- matrix(1:4, 2, 2) y &lt;- matrix(rep(10, 4), 2, 2) ## rep(x, n) repite el objeto x n veces. x ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 y # imprimir las matrices ## [,1] [,2] ## [1,] 10 10 ## [2,] 10 10 x * y ## multiplicación entrada por entrada ## [,1] [,2] ## [1,] 10 30 ## [2,] 20 40 x / y ## división entrada por entrada ## [,1] [,2] ## [1,] 0.1 0.3 ## [2,] 0.2 0.4 x %*% y ## multiplicación matricial ## [,1] [,2] ## [1,] 40 40 ## [2,] 60 60 "],["estructuras-de-control-en-r.html", "Capítulo 8 Estructuras de control en R 8.1 if-else: 8.2 for loop 8.3 while loop 8.4 repeat, next, break", " Capítulo 8 Estructuras de control en R Las estructuras de control nos permiten controlar el flujo de ejecución de una secuencia de comandos. De este modo, podemos poner «lógica» en el código de R y lograr así reutilizar fragmentos de código una y otra vez. Las estructuras de control más utilizadas son: if, else: permite decidir si ejecutar o no un fragmento de código en función de una condición. for: ejecuta un bucle una cantidad fija de veces. while: ejecuta un bucle mientras sea verdadera una condición. repeat: ejecuta un bucle indefinidamente. (la única forma de detener esta estructura es mediante el comando break). break: detiene la ejecución de un bucle. next: salta a la siguiente ejecución de un bucle. return: permite salir de la función. La mayoría de estas no son usadas escribimos código directo en la consola, sino cuando escribimos funciones o expresiones largas. En la próxima clase veremos como trabajar con funcionar en R, pero es necesario tener bases sólidas de estos conceptos pues son necesarias cada vez que queramos producir o leer código. 8.1 if-else: La combinación if-else es muy utilizada a la hora de programar. Esta estructura de control permite actuar en función de una condición. La sintaxis es la siguiente if(&lt;condicion&gt;) { ## bloque de código } if(&lt;condicion&gt;) { ## bloque de código } else { ## otro bloque de código } if(&lt;condition1&gt;) { ## bloque de código } else if(&lt;condicion2&gt;) { ## otro bloque de código } else { ## otro bloque de código } Ejemplo x &lt;- runif(1, 1, 10) y &lt;- 0 if (x &gt; 5) { y &lt;- 10 } x ## [1] 2.736674 y ## [1] 0 tipo.cambio &lt;- 585.6 moneda.deuda &lt;- sample(c(&quot;CRC&quot;, &quot;USD&quot;), 1) saldo.deuda &lt;- runif(1, 1, 1000) saldo.deuda ## [1] 730.3006 moneda.deuda ## [1] &quot;USD&quot; if (moneda.deuda == &quot;USD&quot;) { saldo.deuda &lt;- saldo.deuda * tipo.cambio } saldo.deuda ## [1] 427664.1 estado.mora &lt;- c(&quot;&quot;) dias.mora &lt;- sample(85:100, 1) # sample(x,m), genera m números aleatorios tomados del objeto x. dias.mora ## [1] 99 if (dias.mora &gt; 90) { estado.mora &lt;- &quot;Mora 90&quot; } else { estado.mora &lt;- &quot;Normal&quot; } estado.mora ## [1] &quot;Mora 90&quot; estado.mora &lt;- c(&quot;&quot;) dias.mora &lt;- sample(85:145, 1) # sample(x,m), genera m números aleatorios tomados del objeto x. dias.mora ## [1] 88 if (dias.mora &gt; 120) { estado.mora &lt;- &quot;Cobro Judicial&quot; } else if (90 &gt; dias.mora) { estado.mora &lt;- &quot;Normal&quot; } else { estado.mora &lt;- &quot;Mora 90&quot; } estado.mora ## [1] &quot;Normal&quot; ifelse() es una función que nos permite escribir de forma más compacta la estructura if-else. saldo.deuda &lt;- ifelse(moneda.deuda == &quot;USD&quot;, saldo.deuda * tipo.cambio, saldo.deuda) saldo.deuda ## [1] 250440071 8.2 for loop Los bucles for se utilizan para recorrer . for(&lt;variable&gt; in &lt;objeto iterable&gt;) { # código ... } Recorrer por índice. meses &lt;- c(&quot;Enero&quot;, &quot;Febrero&quot;, &quot;Marzo&quot;, &quot;Abril&quot;, &quot;Mayo&quot;, &quot;Junio&quot;, &quot;Julio&quot;, &quot;Agosto&quot;, &quot;Setiembre&quot;, &quot;Octubre&quot;, &quot;Noviembre&quot;, &quot;Diciembre&quot;) for (i in 1:6) { print(meses[i]) } ## [1] &quot;Enero&quot; ## [1] &quot;Febrero&quot; ## [1] &quot;Marzo&quot; ## [1] &quot;Abril&quot; ## [1] &quot;Mayo&quot; ## [1] &quot;Junio&quot; La función seq_along() es muy utilizada en los ciclos for, para poder generar una secuencia de enteros basada en el tamaño del objeto sobre el que queremos iterar. for (i in seq_along(meses)) { print(meses[i]) } ## [1] &quot;Enero&quot; ## [1] &quot;Febrero&quot; ## [1] &quot;Marzo&quot; ## [1] &quot;Abril&quot; ## [1] &quot;Mayo&quot; ## [1] &quot;Junio&quot; ## [1] &quot;Julio&quot; ## [1] &quot;Agosto&quot; ## [1] &quot;Setiembre&quot; ## [1] &quot;Octubre&quot; ## [1] &quot;Noviembre&quot; ## [1] &quot;Diciembre&quot; Recorrer los elementos. for (mes in meses) { print(mes) } ## [1] &quot;Enero&quot; ## [1] &quot;Febrero&quot; ## [1] &quot;Marzo&quot; ## [1] &quot;Abril&quot; ## [1] &quot;Mayo&quot; ## [1] &quot;Junio&quot; ## [1] &quot;Julio&quot; ## [1] &quot;Agosto&quot; ## [1] &quot;Setiembre&quot; ## [1] &quot;Octubre&quot; ## [1] &quot;Noviembre&quot; ## [1] &quot;Diciembre&quot; 8.3 while loop Los ciclos while comienzan revisando una condición, si se cumple inicia el ciclo y se repite hasta que la condición no se cumpla. contador &lt;- 0 while (contador &lt; 5) { print(contador) contador &lt;- contador + 1 } ## [1] 0 ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 Caminata aleatoria z &lt;- 5 set.seed(1) while (z &gt;= 3 &amp;&amp; z &lt;= 10) { moneda &lt;- rbinom(1, 1, 0.5) if (moneda == 1) { ## Paso hacia la derecha z &lt;- z + 1 } else { ## Paso hacia la izquierda z &lt;- z - 1 } } z ## [1] 2 8.4 repeat, next, break repeat inicia un ciclo infinito. La única forma de terminar o de salir de un ciclo repeat es mediante la instrucción break. No son muy comunes a la hora de hacer análisis de datos, pero vale la pena mencionarlos pues se pueden utilizar para algoritmos que busquen una solución con cierto de nivel de tolerancia, ya que en estos casos no se puede saber de ante mano cuantas iteraciones se necesitan. x0 &lt;- 1 tol &lt;- 1e-10 repeat{ x1 &lt;- algoritmoEstimacion() ## Se calcula el estimado if (abs(x1 - x0) &lt; tol) { ## Se hace el test break } else { ## Continua x0 &lt;- x1 } } next: Se utiliza para avanzar a la siguiente iteración del ciclo. break: Se utiliza para salir del ciclo inmediatamente. "],["funciones.html", "Capítulo 9 Funciones", " Capítulo 9 Funciones Como analistas de datos escribir funciones es una de las mejores herramientas, ya que nos permiten automatizar y estandarizar tareas, además de que hace nuestro código más legible y mucho más sencillo de mantener. La idea de este capítulo es introducir los conceptos básicos de las funciones y buenas prácticas a la hora de escribirlas. Sintaxis nombre.funcion &lt;- function(&lt;entradas&gt;){ ##Cuerpo de la función return &lt;resultado&gt; } Ejemplos: ## Función que calcula el area de un triángulo dada su base y su altura. # Parámetros ## base : Base del triángulo. ## altura: Altura del triángulo # Resultado ## area: Área del triángulo. area.triangulo &lt;- function(base, altura) { area &lt;- (base * altura) / 2 return(area) } area.triangulo(2, 5) ## [1] 5 Una persona desea sacar un préstamo, de \\(P\\) colones a una tasa de interés mensual \\(i\\). El préstamo tiene que ser reembolsado en \\(n\\) cuotas mensuales de tamaño \\(C\\), comenzando dentro de un mes. El problema es calcular \\(C\\). La fórmula \\(C\\) es: \\[ C = P\\cdot\\bigg(\\dfrac{i}{1-(1+i)^{-n}}\\bigg) \\] Supongamos que \\(P=150000\\), que la tasa de interés es del \\(2\\%\\) y que le número de pagos es \\(10\\). EL código en R sería: tasa.interes &lt;- 0.02 n &lt;- 10 principal &lt;- 150000 pago &lt;- principal * tasa.interes / (1 - (1 + tasa.interes)^(-n)) pago ## [1] 16698.98 Utilizando una función: # Parámetros ## tasa.interes : Tasa de interés mensual del préstamo ## n: Número de cuotas ## principal: Monto del préstamo # Resultado ## pago: Cuota del préstamo. calcula.cuota &lt;- function(tasa.interes, n, principal) { pago &lt;- principal * tasa.interes / (1 - (1 + tasa.interes)^(-n)) return(pago) } calcula.cuota(0.02, 10, 150000) ## Orden por defecto ## [1] 16698.98 calcula.cuota(n = 340, tasa.interes = 0.11, principal = 3500000) ## Para cambiar el orden se especifica el nombre del parámetro ## [1] 385000 Ejemplo de función que retorna una lista. # Parámetros ## DF : Data frame ## NC: Número de columna # Resultado ## lista con nombre de la variable correspondiente al número de columna, la media, la mediana, la desviación estándar,la varianza, el máximo y el mínimo. estadisticas &lt;- function(DF, NC) { variable &lt;- DF[, NC] nombre &lt;- colnames(DF)[NC] media &lt;- mean(variable) mediana &lt;- median(variable) deviacion &lt;- sd(variable) varianza &lt;- var(variable) maximo &lt;- max(variable) minimo &lt;- min(variable) return(list(Variable = nombre, Media = media, Mediana = mediana, DesEst = deviacion, Varianza = varianza, Maximo = maximo, Minimo = minimo)) } estadisticas(portafolio.banco, 20) ## Error in estadisticas(portafolio.banco, 20): object &#39;portafolio.banco&#39; not found "],["importación-de-datos.html", "Capítulo 10 Importación de datos", " Capítulo 10 Importación de datos Algunas de las funciones base en R para la lectura datos son: read.table , read.csv, se utilizan para leer datos que tienen formato de tabla. 10.0.1 read.table read.table(file = archivo[, header = TRUE | FALSE, sep = separadorDatos, dec = separadorDecimal, quote = delimitadorCadenas, stringsAsFactors = TRUE | FALSE]) Esta es la función genérica para leer datos en formato .csv y genera , algunos de sus argumentos son: file: El nombre del archivo o su ubicación. header: Variable lógica que indica si el archivo tiene encabezado. sep: String que indica como están separadas las columnas. dec: Para datos numéricos, establece cuál es el separador entre parte entera y decimal. colClasses: Vector con las clases de cada una de las columnas. stringsAsFactors: Indica si las variables de tipo character se deben leer como factor. Leer documentación de la función read.table. 10.0.2 read.csv Es una implementación especializada de read.table() en la que se asume que los parámetros header, sep y dec toman los valores TRUE, “,” y “.” respectivamente. datos.credito &lt;- read.csv(&quot;data/DeudaCredito.csv&quot;, sep = &quot;;&quot;, dec = &quot;.&quot;) str(datos.credito) ## &#39;data.frame&#39;: 400 obs. of 13 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ monto_ingreso: num 14891 106025 104593 148924 55882 ... ## $ monto_limite : int 3606 6645 7075 9504 4897 8047 3388 7114 3300 6819 ... ## $ CalifCredit : int 283 483 514 681 357 569 259 512 266 491 ... ## $ Tarjetas : int 2 3 4 3 2 4 2 2 5 3 ... ## $ Edad : int 34 82 71 36 68 77 37 87 66 41 ... ## $ Educacion : int 11 15 11 11 16 10 12 9 13 19 ... ## $ Genero : chr &quot;Masculino&quot; &quot;Femenino&quot; &quot;Masculino&quot; &quot;Femenino&quot; ... ## $ Estudiante : chr &quot;No&quot; &quot;Si&quot; &quot;No&quot; &quot;No&quot; ... ## $ Casado : int 1 1 0 0 1 0 0 0 0 1 ... ## $ Etnicidad : chr &quot;Caucasico&quot; &quot;Asiatico&quot; &quot;Asiatico&quot; &quot;Asiatico&quot; ... ## $ monto_balance: int 333 903 580 964 331 1151 203 872 279 1350 ... ## $ fecha_ini : chr &quot;12/11/2019&quot; &quot;12/13/2019&quot; &quot;12/17/2019&quot; &quot;12/06/2019&quot; ... Podemos ver que varias variables que deberían ser categóricas se leyeron como strings, para corregir esto podemos colocar el parámetro stringsAsFactors igual a TRUE de la función read_excel(), para leer los caracteres como factores. datos.credito &lt;- read.csv(&quot;data/DeudaCredito.csv&quot;, sep = &quot;,&quot;, dec = &quot;.&quot;, stringsAsFactors = T) str(datos.credito) ## &#39;data.frame&#39;: 400 obs. of 12 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Ingreso : num 14.9 106 104.6 148.9 55.9 ... ## $ Limite : int 3606 6645 7075 9504 4897 8047 3388 7114 3300 6819 ... ## $ CalifCredit: int 283 483 514 681 357 569 259 512 266 491 ... ## $ Tarjetas : int 2 3 4 3 2 4 2 2 5 3 ... ## $ Edad : int 34 82 71 36 68 77 37 87 66 41 ... ## $ Educacion : int 11 15 11 11 16 10 12 9 13 19 ... ## $ Genero : Factor w/ 2 levels &quot;Femenino&quot;,&quot;Masculino&quot;: 2 1 2 1 2 2 1 2 1 1 ... ## $ Estudiante : Factor w/ 2 levels &quot;No&quot;,&quot;Si&quot;: 1 2 1 1 1 1 1 1 1 2 ... ## $ Casado : int 1 1 0 0 1 0 0 0 0 1 ... ## $ Etnicidad : Factor w/ 3 levels &quot;Afrodescendiente&quot;,..: 3 2 2 2 3 3 1 2 3 1 ... ## $ Balance : int 333 903 580 964 331 1151 203 872 279 1350 ... 10.0.3 read_excel Esta se utiliza para leer datos de excel, algunos de sus argumentos son: path: Ruta del archivo. sheet: Hoja del excel que se desea leer, por defecto es la primera. range: Rango de celdas que se desean leer. col_types: Vector con las clases de cada una de las columnas. col_names: Indica si la primera fila corresponde al nombre de las columnas. library(readxl) tipo_cambio &lt;- read_excel(&quot;data/tipo_cambio.xls&quot;) tipo_cambio_top10 &lt;- head(tipo_cambio, 10) ## head(data,n) retorna las primeras n filas de nuestro data frame tipo_cambio_top10 ## # A tibble: 10 x 3 ## `Tipo cambio de compra y de venta del dólar de lo… ...2 ...3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Referencia del Banco Central de Costa Rica &lt;NA&gt; &lt;NA&gt; ## 2 En colones costarricenses &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; TIPO CAMBIO… TIPO DE CAMB… ## 5 1 Ene 2019 604.3899999… 611.75 ## 6 2 Ene 2019 604.3899999… 611.75 ## 7 3 Ene 2019 603.0099999… 611.54999999… ## 8 4 Ene 2019 604.7699999… 611.67999999… ## 9 5 Ene 2019 602.3999999… 611.54999999… ## 10 6 Ene 2019 602.3999999… 611.54999999… Aplicando el head(), podemos ver que la lectura del archivo no es correcta, para hacerlo de forma correcta podemos utilizar el parámetro range de la función read_excel(), para decirle que celdas queremos leer, la notación es la mimsa que se utiliza en MS Excel. tipo_cambio &lt;- read_excel(&quot;data/tipo_cambio.xls&quot;, range = &quot;A6:C787&quot;, col_names = c(&quot;fecha&quot;, &quot;compra&quot;, &quot;venta&quot;)) head(tipo_cambio) ## # A tibble: 6 x 3 ## fecha compra venta ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Ene 2019 604. 612. ## 2 2 Ene 2019 604. 612. ## 3 3 Ene 2019 603. 612. ## 4 4 Ene 2019 605. 612. ## 5 5 Ene 2019 602. 612. ## 6 6 Ene 2019 602. 612. 10.0.4 Calculando requisitos de memoria. Si queremos leer un archivo con 1.500.000 filas y 120 columnas, donde todas son de tipo numérico, realizamos el siguiente cálculo \\[\\begin{align*} 1,500,000\\times120\\times 8 (bytes)\\\\ =&amp;1.44\\times10^9 (bytes)\\\\ =&amp;1.44\\times10^9 / 2^{20} (MB)\\\\ =&amp;1,373 (MB)\\\\ =&amp;1.34 (GB)\\\\ \\end{align*}\\] por lo general se necesita el doble de esto, por lo que necesitamos al menos 4GB de RAM en nuestra computadora. "],["análisis-exploratorio.html", "Capítulo 11 Análisis exploratorio", " Capítulo 11 Análisis exploratorio Salvo que lo hayamos creado nosotros mismos o estemos familiarizados con el conjunto de datos que carguemos a R generalmente estamos interesados en obtener una idea general sobre su contenido. Con este fin se aplican funciones de estadística descriptiva, conservando la estructura de los datos (columnas que lo forman y su tipo, número de observaciones, etc.), para tener una idea general sobre cada variable. 11.0.1 Información general. Asumiendo que comenzamos a trabajar con un conjunto de datos desconocido, lo primero que nos interesa es sera saber qué atributos contiene, cuántas observaciones hay, etc. En secciones anteriores se definieron funciones como class() y typeof(), con las que podemos conocer la clase de un objeto y su tipo. La función str() aporta más información, incluyendo el número de variables y observaciones y algunos detalles sobre cada una de las variables (columnas). class(datos.credito) # Clase del objeto ## [1] &quot;data.frame&quot; # Información sobre su estructura str(datos.credito) ## &#39;data.frame&#39;: 400 obs. of 12 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Ingreso : num 14.9 106 104.6 148.9 55.9 ... ## $ Limite : int 3606 6645 7075 9504 4897 8047 3388 7114 3300 6819 ... ## $ CalifCredit: int 283 483 514 681 357 569 259 512 266 491 ... ## $ Tarjetas : int 2 3 4 3 2 4 2 2 5 3 ... ## $ Edad : int 34 82 71 36 68 77 37 87 66 41 ... ## $ Educacion : int 11 15 11 11 16 10 12 9 13 19 ... ## $ Genero : Factor w/ 2 levels &quot;Femenino&quot;,&quot;Masculino&quot;: 2 1 2 1 2 2 1 2 1 1 ... ## $ Estudiante : Factor w/ 2 levels &quot;No&quot;,&quot;Si&quot;: 1 2 1 1 1 1 1 1 1 2 ... ## $ Casado : int 1 1 0 0 1 0 0 0 0 1 ... ## $ Etnicidad : Factor w/ 3 levels &quot;Afrodescendiente&quot;,..: 3 2 2 2 3 3 1 2 3 1 ... ## $ Balance : int 333 903 580 964 331 1151 203 872 279 1350 ... 11.0.2 Exploración del contenido 33. Aunque la función str() facilita una muestra del contenido de cada variable, en general dicha información es insuficiente. Podemos recurrir a funciones como head() y tail() para obtener los primeros y últimos elementos, respectivamente, de un objeto en R. Asimismo, la función summary() ofrece un resumen global del contenido de cada variable: su valor mínimo, máximo y medio, mediana, cuartiles y, en el caso de las variables qualitativas, el número de elementos por categoría. head(datos.credito) ## head(X,n) muestra los primeros n elementos del objeto X, por defecto n=6. ## X Ingreso Limite CalifCredit Tarjetas Edad Educacion Genero Estudiante ## 1 1 14.891 3606 283 2 34 11 Masculino No ## 2 2 106.025 6645 483 3 82 15 Femenino Si ## 3 3 104.593 7075 514 4 71 11 Masculino No ## 4 4 148.924 9504 681 3 36 11 Femenino No ## 5 5 55.882 4897 357 2 68 16 Masculino No ## 6 6 80.180 8047 569 4 77 10 Masculino No ## Casado Etnicidad Balance ## 1 1 Caucasico 333 ## 2 1 Asiatico 903 ## 3 0 Asiatico 580 ## 4 0 Asiatico 964 ## 5 1 Caucasico 331 ## 6 0 Caucasico 1151 head(datos.credito, 3) ## X Ingreso Limite CalifCredit Tarjetas Edad Educacion Genero Estudiante ## 1 1 14.891 3606 283 2 34 11 Masculino No ## 2 2 106.025 6645 483 3 82 15 Femenino Si ## 3 3 104.593 7075 514 4 71 11 Masculino No ## Casado Etnicidad Balance ## 1 1 Caucasico 333 ## 2 1 Asiatico 903 ## 3 0 Asiatico 580 tail(datos.credito) ## X Ingreso Limite CalifCredit Tarjetas Edad Educacion Genero Estudiante ## 395 395 49.794 5758 410 4 40 8 Masculino No ## 396 396 12.096 4100 307 3 32 13 Masculino No ## 397 397 13.364 3838 296 5 65 17 Masculino No ## 398 398 57.872 4171 321 5 67 12 Femenino No ## 399 399 37.728 2525 192 1 44 13 Masculino No ## 400 400 18.701 5524 415 5 64 7 Femenino No ## Casado Etnicidad Balance ## 395 0 Caucasico 734 ## 396 1 Caucasico 560 ## 397 0 Afrodescendiente 480 ## 398 1 Caucasico 138 ## 399 1 Caucasico 0 ## 400 0 Asiatico 966 tail(datos.credito, 3) ## X Ingreso Limite CalifCredit Tarjetas Edad Educacion Genero Estudiante ## 398 398 57.872 4171 321 5 67 12 Femenino No ## 399 399 37.728 2525 192 1 44 13 Masculino No ## 400 400 18.701 5524 415 5 64 7 Femenino No ## Casado Etnicidad Balance ## 398 1 Caucasico 138 ## 399 1 Caucasico 0 ## 400 0 Asiatico 966 summary(datos.credito) ## X Ingreso Limite CalifCredit ## Min. : 1.0 Min. : 10.35 Min. : 855 Min. : 93.0 ## 1st Qu.:100.8 1st Qu.: 21.01 1st Qu.: 3088 1st Qu.:247.2 ## Median :200.5 Median : 33.12 Median : 4622 Median :344.0 ## Mean :200.5 Mean : 45.22 Mean : 4736 Mean :354.9 ## 3rd Qu.:300.2 3rd Qu.: 57.47 3rd Qu.: 5873 3rd Qu.:437.2 ## Max. :400.0 Max. :186.63 Max. :13913 Max. :982.0 ## Tarjetas Edad Educacion Genero Estudiante ## Min. :1.000 Min. :23.00 Min. : 5.00 Femenino :207 No:360 ## 1st Qu.:2.000 1st Qu.:41.75 1st Qu.:11.00 Masculino:193 Si: 40 ## Median :3.000 Median :56.00 Median :14.00 ## Mean :2.958 Mean :55.67 Mean :13.45 ## 3rd Qu.:4.000 3rd Qu.:70.00 3rd Qu.:16.00 ## Max. :9.000 Max. :98.00 Max. :20.00 ## Casado Etnicidad Balance ## Min. :0.0000 Afrodescendiente: 99 Min. : 0.00 ## 1st Qu.:0.0000 Asiatico :102 1st Qu.: 68.75 ## Median :1.0000 Caucasico :199 Median : 459.50 ## Mean :0.6125 Mean : 520.01 ## 3rd Qu.:1.0000 3rd Qu.: 863.00 ## Max. :1.0000 Max. :1999.00 Como podemos observar la variable Casado se leyó como numérica, esto no tienen mucho sentido, para transformarla a categórica utilizamos la función factor(). ## Transformamos la variable Casado a categorica datos.credito$Casado &lt;- factor(datos.credito$Casado, levels = c(1, 0), labels = c(&quot;si&quot;, &quot;no&quot;)) summary(datos.credito) ## X Ingreso Limite CalifCredit ## Min. : 1.0 Min. : 10.35 Min. : 855 Min. : 93.0 ## 1st Qu.:100.8 1st Qu.: 21.01 1st Qu.: 3088 1st Qu.:247.2 ## Median :200.5 Median : 33.12 Median : 4622 Median :344.0 ## Mean :200.5 Mean : 45.22 Mean : 4736 Mean :354.9 ## 3rd Qu.:300.2 3rd Qu.: 57.47 3rd Qu.: 5873 3rd Qu.:437.2 ## Max. :400.0 Max. :186.63 Max. :13913 Max. :982.0 ## Tarjetas Edad Educacion Genero Estudiante ## Min. :1.000 Min. :23.00 Min. : 5.00 Femenino :207 No:360 ## 1st Qu.:2.000 1st Qu.:41.75 1st Qu.:11.00 Masculino:193 Si: 40 ## Median :3.000 Median :56.00 Median :14.00 ## Mean :2.958 Mean :55.67 Mean :13.45 ## 3rd Qu.:4.000 3rd Qu.:70.00 3rd Qu.:16.00 ## Max. :9.000 Max. :98.00 Max. :20.00 ## Casado Etnicidad Balance ## si:245 Afrodescendiente: 99 Min. : 0.00 ## no:155 Asiatico :102 1st Qu.: 68.75 ## Caucasico :199 Median : 459.50 ## Mean : 520.01 ## 3rd Qu.: 863.00 ## Max. :1999.00 Por otro lado la variable fecha_ini se leyó como factor, en lugar de como fecha, para corregir esto usamos la función as.Date(). datos.credito$fecha_ini &lt;- as.Date(datos.credito$fecha_ini, format = &quot;%m/%d/%Y&quot;) ## Error in `$&lt;-.data.frame`(`*tmp*`, fecha_ini, value = structure(numeric(0), class = &quot;Date&quot;)): replacement has 0 rows, data has 400 11.0.3 Funciones básicas. Recordemos que R cuenta con multitud de funciones de tipo estadístico, entre ellas las que permiten obtener información descriptiva sobre la distribución de valores en un vector. Estas funciones pueden también aplicarse a objetos más complejos, como comprobaremos después. La sintaxis de las funciones de estadística descriptiva más comunes se presentan a continuación. min(vector, na.rm = T / F) # Devuelve el valor mínimo existente en el vector facilitado como parámetro. # El resultado será NA si el vector contiene algún valor ausente, a menos que se # entregue el parámetro na.rm con el valor TRUE. max(vector, na.rm = T / F) # Devuelve el valor máximo existente en el vector facilitado como parámetro. # El resultado será NA si el vector contiene algún valor ausente, a menos que se # entregue el parámetro na.rm con el valor TRUE. range(vector, na.rm = T / F) # Devuelve un vector de dos elementos con el valor mínimo y máximo de los # existentes en el vector facilitado como parámetro range(vector, na.rm = T / F) # Devuelve un vector de dos elementos con el valor mínimo y máximo de los # existentes en el vector facilitado como parámetro saldo &lt;- c(1000, 2000, 3000, 4500) min(saldo) ## [1] 1000 max(saldo) ## [1] 4500 range(saldo) ## [1] 1000 4500 mean(saldo) ## [1] 2625 var(saldo) ## [1] 2229167 sd(saldo) ## [1] 1493.039 median(saldo) ## [1] 2500 quantile(saldo) ## 0% 25% 50% 75% 100% ## 1000 1750 2500 3375 4500 A fin de obtener un resultado más compacto, se crea una lista con el valor devuelto por cada operación y, finalmente, se usa la función unlist() para generar un vector con la información a mostrar: valores &lt;- saldo unlist(list(media = mean(valores), desviacion = sd(valores), varianza = var(valores), minimo = min(valores), maximo = max(valores), mediana = median(valores), rango = range(valores), quartiles = quantile(valores))) ## media desviacion varianza minimo maximo ## 2625.000 1493.039 2229166.667 1000.000 4500.000 ## mediana rango1 rango2 quartiles.0% quartiles.25% ## 2500.000 1000.000 4500.000 1000.000 1750.000 ## quartiles.50% quartiles.75% quartiles.100% ## 2500.000 3375.000 4500.000 11.0.4 Aplicación a estructuras complejas. Las anteriores funciones pueden aplicarse sobre estructuras más complejas que los vectores, como matrices y data frames. En la mayoría de los casos no nos interesan las medidas estadísticas de todo el conjunto de datos, sino de cada una de las variables (columnas) por separado. mean(datos.credito$Ingreso) ## [1] 45.21889 max(datos.credito$Limite) ## [1] 13913 "],["data-frames-con-el-paquete-dplyr-.html", "Capítulo 12 Data Frames con el paquete dplyr. 12.1 Paquete dplyr: 12.2 select(): 12.3 filter(): 12.4 arrange(): 12.5 rename(): 12.6 mutate(): 12.7 group_by(): 12.8 Operador pipe %&gt;%:", " Capítulo 12 Data Frames con el paquete dplyr. Como vimos en la clase anterior los data frames son las estructuras más importantes en R, recordemos que básicamente un data frame es una tabla, donde cada fila representa una observación o individuo, y cada columna una variable o característica de esta observación. Dada la importancia de estas estructuras, es muy importante conocer las mejores herramientas para trabajar con ellas, en la sección de subsetting vimos como obtener subconjuntos de nuestros datos, sin embargo cuando tenemos que hacer varios filtros o agrupaciones el uso de “[],” “$,” no es tan recomendable, pues es más fácil equivocarse y el código es más complicado de leer. El paquete dplyr está diseñado para mitigar estas complicaciones y optimizado para realizar estas tareas. 12.1 Paquete dplyr: El paquete dplyr fue desarrollado por Hadley Wickham de RStudio y us una versión mejorada del paquete plyr. Una de las ventajas de este paquete es que tiene cierta gramática en sus funciones, lo que facilita escribir y leer código. Además sus funciones son muy rápidas y algunas de sus operaciones están programadas en C++. Gramática de dplyr Algunos de los “verbos” que tiene el paquete dplyr son los siguientes: select: Retorna un subconjunto de columnas. filter: Extrae subconjuntos de filas basado en condiciones lógicas. arrange: Reordena las filas de un data frame. rename: Renombra las variables del data frame. mutate: Agrega columnas o transforma las existentes. summarise / summarize: Genera un resumen estadístico de las variables del data frame. %&gt;%: El operador “pipe” es usado para conectar varios “verbos” en una sola ejecución. Es importante notar que, el primer argumento de todas estas funciones es un data frame y su resultado también es un data frame, por eso es fácil y útil combinarlas. Instalación ## Para instalarlo basta ejecutar lo siguiente en la consola install.packages(&quot;dplyr&quot;) ## Para utilizar las funciones se debe cargar la librería mediante la instrucción library(dplyr) Cargamos el archivo de datos datos.credito &lt;- read.csv(&quot;data/DeudaCredito.csv&quot;, sep = &quot;;&quot;, dec = &quot;.&quot;, stringsAsFactors = T) datos.credito$Casado &lt;- factor(datos.credito$Casado, levels = c(1, 0), labels = c(&quot;si&quot;, &quot;no&quot;)) datos.credito$fecha_ini &lt;- as.Date(datos.credito$fecha_ini, format = &quot;%m/%d/%Y&quot;) 12.2 select(): Normalmente trabajamos con data frames que tienen muchas variables y necesitamos enfocarnos en solo algunas de estas, la función select() como su nombre lo sugiere, sirve para obtener las columnas deseadas de nuestro conjunto de datos. Primero vamos a ver de forma general la estructura de nuestros datos, utilizando las funciones dim() y str(). dim(datos.credito) ## Obtenemos la dimensiones de nuestro data frame [filas, columnas]. ## [1] 400 13 str(datos.credito) ## Presenta un resumen las variables del data frame y su clase. ## &#39;data.frame&#39;: 400 obs. of 13 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ monto_ingreso: num 14891 106025 104593 148924 55882 ... ## $ monto_limite : int 3606 6645 7075 9504 4897 8047 3388 7114 3300 6819 ... ## $ CalifCredit : int 283 483 514 681 357 569 259 512 266 491 ... ## $ Tarjetas : int 2 3 4 3 2 4 2 2 5 3 ... ## $ Edad : int 34 82 71 36 68 77 37 87 66 41 ... ## $ Educacion : int 11 15 11 11 16 10 12 9 13 19 ... ## $ Genero : Factor w/ 2 levels &quot;Femenino&quot;,&quot;Masculino&quot;: 2 1 2 1 2 2 1 2 1 1 ... ## $ Estudiante : Factor w/ 2 levels &quot;No&quot;,&quot;Si&quot;: 1 2 1 1 1 1 1 1 1 2 ... ## $ Casado : Factor w/ 2 levels &quot;si&quot;,&quot;no&quot;: 1 1 2 2 1 2 2 2 2 1 ... ## $ Etnicidad : Factor w/ 3 levels &quot;Afrodescendiente&quot;,..: 3 2 2 2 3 3 1 2 3 1 ... ## $ monto_balance: int 333 903 580 964 331 1151 203 872 279 1350 ... ## $ fecha_ini : Date, format: &quot;2019-12-11&quot; &quot;2019-12-13&quot; ... Suponga que queremos las columnas Edad, Educación, Género, Estudiante, Casado datos.credito.info_personal &lt;- select(datos.credito, c(&quot;Edad&quot;, &quot;Educacion&quot;, &quot;Genero&quot;, &quot;Estudiante&quot;, &quot;Casado&quot;, &quot;Etnicidad&quot;)) head(datos.credito.info_personal) ## Edad Educacion Genero Estudiante Casado Etnicidad ## 1 34 11 Masculino No si Caucasico ## 2 82 15 Femenino Si si Asiatico ## 3 71 11 Masculino No no Asiatico ## 4 36 11 Femenino No no Asiatico ## 5 68 16 Masculino No si Caucasico ## 6 77 10 Masculino No no Caucasico También podemos utilizar el select() eligiendo las columnas que no queremos. datos.credito.info_personal.sinEtnia &lt;- select(datos.credito.info_personal, -Etnicidad) ## para quitar varias columnas utilizamos un vector, por ejemplo: -c(&quot;Etnicidad&quot;, &quot;Casado) head(datos.credito.info_personal.sinEtnia) ## Edad Educacion Genero Estudiante Casado ## 1 34 11 Masculino No si ## 2 82 15 Femenino Si si ## 3 71 11 Masculino No no ## 4 36 11 Femenino No no ## 5 68 16 Masculino No si ## 6 77 10 Masculino No no Otra forma es seleccionar las columnas que tengan inicien o terminen con ciertos caracteres, por ejemplo si queremos todas las columnas que tienen el prefijo “monto.” datos.credito_montos &lt;- select(datos.credito, starts_with(&quot;monto&quot;)) ## Podemos usar ends_with(&quot;sufijo&quot;) para elegir las que terminen con cierto sufijo. head(datos.credito_montos) ## monto_ingreso monto_limite monto_balance ## 1 14891.00 3606 333 ## 2 106025.00 6645 903 ## 3 104593.00 7075 580 ## 4 148924.00 9504 964 ## 5 55882.00 4897 331 ## 6 80.18 8047 1151 12.3 filter(): Esta función se utiliza para extraer filas de nuestro data frame utilizando condiciones. datos.credito_enero &lt;- filter(datos.credito, months(fecha_ini) == &quot;January&quot;) dim(datos.credito_enero) ## [1] 0 13 head(datos.credito_enero) ## [1] X monto_ingreso monto_limite CalifCredit Tarjetas ## [6] Edad Educacion Genero Estudiante Casado ## [11] Etnicidad monto_balance fecha_ini ## &lt;0 rows&gt; (or 0-length row.names) datos.credito_enero_fem &lt;- filter(datos.credito, months(fecha_ini) == &quot;January&quot; &amp; Genero == &quot;Femenino&quot;) dim(datos.credito_enero_fem) ## [1] 0 13 head(datos.credito_enero_fem) ## [1] X monto_ingreso monto_limite CalifCredit Tarjetas ## [6] Edad Educacion Genero Estudiante Casado ## [11] Etnicidad monto_balance fecha_ini ## &lt;0 rows&gt; (or 0-length row.names) 12.4 arrange(): Esta función se utiliza para ordenar las filas de un data frame de acuerdo a una de sus variables. Ordenamos de acuerdo la columna que contiene las fechas de inicio. datos.credito_ordenado &lt;- arrange(datos.credito, fecha_ini) ## De forma ascendente por defecto head(select(datos.credito_ordenado, fecha_ini, monto_balance)) ## fecha_ini monto_balance ## 1 2011-01-17 1448 ## 2 2016-06-01 0 ## 3 2016-10-21 962 ## 4 2016-10-21 345 ## 5 2016-10-21 0 ## 6 2016-10-21 480 datos.credito_ordenado &lt;- arrange(datos.credito, desc(fecha_ini)) ## De forma descendente. head(select(datos.credito_ordenado, fecha_ini, monto_balance)) ## fecha_ini monto_balance ## 1 2020-06-30 250 ## 2 2020-06-30 295 ## 3 2020-06-29 637 ## 4 2020-06-29 209 ## 5 2020-06-29 531 ## 6 2020-06-26 0 12.5 rename(): Renombrar variables puede ser de mucha utilidad para poder escribir código y hacerlo más legible. Sin la función rename() esta tarea puede ser bastante tediosa. datos.credito &lt;- rename(datos.credito, cant_tarjetas = &quot;Tarjetas&quot;, calif_credit = CalifCredit, id = X) head(datos.credito) ## id monto_ingreso monto_limite calif_credit cant_tarjetas Edad Educacion ## 1 1 14891.00 3606 283 2 34 11 ## 2 2 106025.00 6645 483 3 82 15 ## 3 3 104593.00 7075 514 4 71 11 ## 4 4 148924.00 9504 681 3 36 11 ## 5 5 55882.00 4897 357 2 68 16 ## 6 6 80.18 8047 569 4 77 10 ## Genero Estudiante Casado Etnicidad monto_balance fecha_ini ## 1 Masculino No si Caucasico 333 2019-12-11 ## 2 Femenino Si si Asiatico 903 2019-12-13 ## 3 Masculino No no Asiatico 580 2019-12-17 ## 4 Femenino No no Asiatico 964 2019-12-06 ## 5 Masculino No si Caucasico 331 2019-10-17 ## 6 Masculino No no Caucasico 1151 2020-02-07 12.6 mutate(): Esta función nos permite crear variables a partir de las que ya existen, de una forma muy sencilla. datos.credito &lt;- mutate(datos.credito, razon = monto_limite / monto_ingreso) head(select(datos.credito, monto_ingreso, monto_limite, razon)) ## monto_ingreso monto_limite razon ## 1 14891.00 3606 0.24215969 ## 2 106025.00 6645 0.06267390 ## 3 104593.00 7075 0.06764315 ## 4 148924.00 9504 0.06381779 ## 5 55882.00 4897 0.08763108 ## 6 80.18 8047 100.36168621 También funciona para agregar variables de forma manual datos.credito &lt;- mutate(datos.credito, fecha_actual = Sys.Date(), dif_fechas = fecha_actual - fecha_ini) head(select(datos.credito, fecha_ini, fecha_actual, dif_fechas)) ## fecha_ini fecha_actual dif_fechas ## 1 2019-12-11 2021-02-23 440 days ## 2 2019-12-13 2021-02-23 438 days ## 3 2019-12-17 2021-02-23 434 days ## 4 2019-12-06 2021-02-23 445 days ## 5 2019-10-17 2021-02-23 495 days ## 6 2020-02-07 2021-02-23 382 days 12.7 group_by(): Esta función se utiliza para generar subconjuntos de los datos a partir de ciertas propiedades, luego de hacer esto podemos generar resúmenes estadísticos de esos subconjuntos. La estrategia en general es separar el data frame en partes de acuerdo a una o más variables y luego aplicar un summary en cada una de esas partes. datos.credito_genero &lt;- group_by(datos.credito, Genero) ## Agrupamos por genero summarize(datos.credito_genero, mean(Edad)) ## # A tibble: 2 x 2 ## Genero `mean(Edad)` ## * &lt;fct&gt; &lt;dbl&gt; ## 1 Femenino 55.7 ## 2 Masculino 55.6 summarize(datos.credito_genero, &quot;Media Ingreso (CRC)&quot; = mean(monto_ingreso) * 619) ## Pasamos a colones ## # A tibble: 2 x 2 ## Genero `Media Ingreso (CRC)` ## * &lt;fct&gt; &lt;dbl&gt; ## 1 Femenino 24622638. ## 2 Masculino 25218931. summarize(datos.credito_genero, &quot;Media Ingreso (CRC)&quot; = mean(monto_ingreso) * 619, &quot;Media edad&quot; = mean(Edad)) ## Pasamos a colones ## # A tibble: 2 x 3 ## Genero `Media Ingreso (CRC)` `Media edad` ## * &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Femenino 24622638. 55.7 ## 2 Masculino 25218931. 55.6 datos.credito_gen_casado &lt;- group_by(datos.credito, Genero, Estudiante) ## Agrupamos por genero y por casado. resumen_gen_casado &lt;- summarize(datos.credito_gen_casado, &quot;Cantidad de individuos&quot; = n()) ## n() nos da la cantidad de elementos por grupo. resumen_gen_casado ## # A tibble: 4 x 3 ## # Groups: Genero [2] ## Genero Estudiante `Cantidad de individuos` ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 Femenino No 183 ## 2 Femenino Si 24 ## 3 Masculino No 177 ## 4 Masculino Si 16 library(lubridate) ## Se utiliza la función year() datos.credito_anho &lt;- group_by(datos.credito, &quot;Fecha inicio&quot; = year(fecha_ini), Genero) ## Agrupamos por fecha inicio resumen.anho &lt;- summarize(datos.credito_anho, &quot;Media balance&quot; = mean(monto_balance), &quot;Cantidad de individuos&quot; = n()) ## n() nos da la cantidad de elementos por grupo. resumen.anho ## # A tibble: 11 x 4 ## # Groups: Fecha inicio [6] ## `Fecha inicio` Genero `Media balance` `Cantidad de individuos` ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2011 Femenino 1448 1 ## 2 2016 Femenino 666. 5 ## 3 2016 Masculino 371. 16 ## 4 2017 Femenino 501. 18 ## 5 2017 Masculino 456. 17 ## 6 2018 Femenino 630. 25 ## 7 2018 Masculino 564. 16 ## 8 2019 Femenino 591. 83 ## 9 2019 Masculino 459. 70 ## 10 2020 Femenino 414. 75 ## 11 2020 Masculino 588. 74 resumen.anho &lt;- arrange(resumen.anho, desc(`Fecha inicio`)) ## Ordenamos por año de forma descendente resumen.anho ## # A tibble: 11 x 4 ## # Groups: Fecha inicio [6] ## `Fecha inicio` Genero `Media balance` `Cantidad de individuos` ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2020 Femenino 414. 75 ## 2 2020 Masculino 588. 74 ## 3 2019 Femenino 591. 83 ## 4 2019 Masculino 459. 70 ## 5 2018 Femenino 630. 25 ## 6 2018 Masculino 564. 16 ## 7 2017 Femenino 501. 18 ## 8 2017 Masculino 456. 17 ## 9 2016 Femenino 666. 5 ## 10 2016 Masculino 371. 16 ## 11 2011 Femenino 1448 1 12.8 Operador pipe %&gt;%: El operador %&gt;% es muy útil a la hora de utilizar funciones del paquete dplyr de forma consecutiva, primero recordemos que el resultado de un función de este paquete siempre es un data frame, por lo que es posible ( y muy usual) aplicar varias funciones, pero si lo hacemos de forma anidada es un poco confuso de leer, pues se vería de esta forma &gt; tercera(segunda(primera(dataframe))) Esta lógica anidada no es la forma más natural de pensar, por lo el operador %&gt;% no es permite escribir las operaciones en forma de secuencia de izquierda a derecha, es decir &gt; primera(dataframe) %&gt;% segunda %&gt;% tercera datos.credito %&gt;% select(monto_balance, monto_ingreso, monto_limite, calif_credit) %&gt;% arrange(desc(monto_limite)) %&gt;% head(3) ## monto_balance monto_ingreso monto_limite calif_credit ## 1 1999 182728 13913 982 ## 2 1809 186634 13414 949 ## 3 1779 152298 12066 828 ## También se pueden ver los últimos usando tail(n) datos.credito %&gt;% select(monto_balance, monto_ingreso, monto_limite, calif_credit) %&gt;% arrange(desc(monto_limite)) %&gt;% tail(3) ## monto_balance monto_ingreso monto_limite calif_credit ## 398 0 13444 886 121 ## 399 0 14084 855 120 ## 400 0 12414 855 119 El último ejemplo que hicimos en la sección de group_by() se puede reescribir de forma más sencilla utilizando %&gt;% de la siguiente forma: group_by(datos.credito, &quot;Fecha inicio&quot; = year(fecha_ini), Genero) %&gt;% summarize(&quot;Media balance&quot; = mean(monto_balance), &quot;Cantidad de individuos&quot; = n()) %&gt;% arrange(desc(`Fecha inicio`)) ## # A tibble: 11 x 4 ## # Groups: Fecha inicio [6] ## `Fecha inicio` Genero `Media balance` `Cantidad de individuos` ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2020 Femenino 414. 75 ## 2 2020 Masculino 588. 74 ## 3 2019 Femenino 591. 83 ## 4 2019 Masculino 459. 70 ## 5 2018 Femenino 630. 25 ## 6 2018 Masculino 564. 16 ## 7 2017 Femenino 501. 18 ## 8 2017 Masculino 456. 17 ## 9 2016 Femenino 666. 5 ## 10 2016 Masculino 371. 16 ## 11 2011 Femenino 1448 1 Es bueno aclarar que este operador no es exclusivo para funciones del paquete dplyr se puede usar siempre que escribamos código siempre y cuando tenga sentido, es decir, que el resultado de la operación anterior sea compatible con el insumo de la función siguiente. Para escribir este operador de forma rápida utilizamos el shortcut: CTRL+SHIFT+M. "]]
